package com.eligible.flag.service;

import java.sql.PreparedStatement;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.stereotype.Service;

import com.eligible.flag.bean.DidiRequestBean;

@Service
public class ParmService {

	private final JdbcTemplate jdbcTemplate;

	public ParmService(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate = jdbcTemplate;
	}

	public void input(DidiRequestBean bean) {
		String mkt = bean.getDealerMarket();
		String inServiceDate = bean.getInServiceDate();

		System.out.println(mkt);
		System.out.println(inServiceDate);
	}

	public Map<Integer, Map<String, String>> getParmData(Map<String, Object> dataMap) {

		String queryBuilder = "SELECT C_MKT AS MARKET, C_BRND AS BRAND, I_MOD_YR AS MODEL_YEAR, "
				+ "C_BODY_MODEL AS BODY_MODEL, C_ENG_SC AS ENGINE_SC , C_TRANS_SC AS TRANS_SC, "
				+ "I_CURR_REP AS DEALER_CODE, C_ZONE AS ZONE , C_LANG AS LANG, Q_MIS AS MIS, "
				+ "C_MSG AS ELIGIBILITY_MESSAGE, C_ZONE AS ZONE , C_LANG AS LANG, Q_MIS AS MIS, "
				+ "C_LOP1_2 AS LOP1_2, C_LOP3_4 AS LOP3_4, C_LOP5_6 AS LOP5_6, C_LOP7_8 AS LOP7_8 FROM PARM "
				+ "WHERE C_MKT IN (?,'*') AND C_BRND IN (?,'*') AND I_MOD_YR IN (?,'*') AND C_BODY_MODEL IN (?,'*') AND C_ENG_SC IN (?,'*') AND C_TRANS_SC IN (?,'*') "
				+ "AND I_CURR_REP  IN (?,'*') AND C_ZONE IN (?,'*') AND C_LANG IN (?,'*') AND C_LOP1_2 IN (?,'*') AND C_LOP3_4 IN (?,'*') AND C_LOP5_6 IN (?,'*') "
				+ "AND C_LOP7_8 IN(?,'*') AND Q_MIS >=? AND L_REC_STAT ='A'";

		String sql = queryBuilder.toString();

		List<Map<String, String>> data = null;
		DidiRequestBean requestBean = (DidiRequestBean) dataMap.get("requestBean");

		try {
			data = jdbcTemplate.query(sql, new PreparedStatementSetter() {
				public void setValues(PreparedStatement preparedStatement) throws SQLException {

					preparedStatement.setString(1, "U");
					preparedStatement.setString(2, "J");
					preparedStatement.setString(3, "1993");
					preparedStatement.setString(4, "ZJJL74");
					preparedStatement.setString(5, "EDL");
					preparedStatement.setString(6, "DFT");
					preparedStatement.setString(7, "");
					preparedStatement.setString(8, "");
					preparedStatement.setString(9, "");
					preparedStatement.setString(10, "");
					preparedStatement.setString(11, "");
					preparedStatement.setString(12, "");
					preparedStatement.setString(13, "");
					preparedStatement.setInt(14, 2);

				}
			}, (rs) -> {
				List<Map<String, String>> entities = new ArrayList<>();

				ResultSetMetaData metaData = rs.getMetaData();
				int columnCount = metaData.getColumnCount();

				while (rs.next()) {
					Map<String, String> map = new LinkedHashMap<>();
					for (int i = 1; i <= columnCount; i++) {
						String columnName = metaData.getColumnName(i);
						Object columnValue = rs.getObject(i);
						map.put(columnName, columnValue.toString());
					}

					entities.add(map);
				}

				return entities;
			});
		} catch (Exception e) {
			e.printStackTrace();
		}

		return this.rankLogic(data);
	}

	private Map<Integer, Map<String, String>> rankLogic(List<Map<String, String>> data) {
		Map<Integer, Map<String, String>> rowDataWithRankNo = new LinkedHashMap<>();
		int totalRankCount = 0;
		for (Map<String, String> eachRow : data) {
			totalRankCount = 0;
			for (Map.Entry<String, String> eachColumn : eachRow.entrySet()) {
				if (eachColumn.getKey().equals("ENGINE_SC") && !eachColumn.getValue().toString().equals("*")) {
					totalRankCount += 5000;
				} else if (eachColumn.getKey().equals("TRANS_SC") && !eachColumn.getValue().toString().equals("*")) {
					totalRankCount += 3000;
				} else if (eachColumn.getKey().equals("BRAND") && !eachColumn.getValue().toString().equals("*")) {
					totalRankCount += 1000;
				} else if (eachColumn.getKey().equals("BODY_MODEL") && !eachColumn.getValue().toString().equals("*")) {
					totalRankCount += 500;
				} else if (eachColumn.getKey().equals("MODEL_YEAR") && !eachColumn.getValue().toString().equals("*")) {
					totalRankCount += 200;
				} else if (eachColumn.getKey().equals("ZONE") && !eachColumn.getValue().toString().equals("*")) {
					totalRankCount += 100;
				} else if (eachColumn.getKey().equals("DEALER") && !eachColumn.getValue().toString().equals("*")) {
					totalRankCount += 50;
				} else if (eachColumn.getKey().equals("LOP") && !eachColumn.getValue().toString().equals("*")) {
					totalRankCount += 20;
				}
			}
			System.out.println("totalRankCount: " + totalRankCount + " : " + eachRow);
			rowDataWithRankNo.put(totalRankCount, eachRow);
		}

		Optional<Entry<Integer, Map<String, String>>> entryWithHighestKey = rowDataWithRankNo.entrySet().stream()
				.max(Map.Entry.comparingByKey());

		entryWithHighestKey.ifPresent(entry -> {
			rowDataWithRankNo.clear();
			rowDataWithRankNo.put(entry.getKey(), entry.getValue());
		});
		System.out.println("rowDataWithRankNo " + rowDataWithRankNo);
		return rowDataWithRankNo;
	}

}
